{"name": "test_account[datas1]", "status": "failed", "statusDetails": {"message": "AssertionError: assert 'success' in '{\"code\": 400, \"data\": \"\", \"message\": \"手机号码不能重复\"}'\n +  where '{\"code\": 400, \"data\": \"\", \"message\": \"手机号码不能重复\"}' = <function dumps at 0x0000025BC0CE09D8>({'code': 400, 'data': '', 'message': '手机号码不能重复'}, ensure_ascii=False)\n +    where <function dumps at 0x0000025BC0CE09D8> = json.dumps\n +    and   {'code': 400, 'data': '', 'message': '手机号码不能重复'} = <bound method Response.json of <Response [200]>>()\n +      where <bound method Response.json of <Response [200]>> = <Response [200]>.json", "trace": "datas = {'前置条件': 'login', '接口名称': '新增账号', '是否执行': 'y', '期望结果': 'success', ...}\n\n    @pytest.mark.parametrize('datas',excel.runs())\n    def test_account(datas):\n    \t# 对请求参数为空以及做反序列化处理\n    \tparams = datas[ExcelVarles.params]\n    \tif len(str(params).strip()) == 0:\n    \t\tpass\n    \telif len(str(params).strip()) >= 0:\n    \t\tparams = json.loads(params)\n    \t\t# print(params)\n    \n    \t# 对请求头为空以及做反序列化处理\n    \theader = datas[ExcelVarles.headers]\n    \tif len(str(header).strip()) == 0:\n    \t\tpass\n    \telif len(str(header).strip()) >= 0:\n    \t\theader = json.loads(header)\n    \n    \t'''\n    \t1、先获取到所有前置测试点的测试用例\n    \t2、执行前置测试点\n    \t3、前置测试点的结果信息\n    \t4、将结果信息替换对应测试点的变量\n    \t'''\n    \t# 执行前置条件关联的测试点\n    \tr = obj.post(\n    \t\turl=excel.case_prev(datas[ExcelVarles.casePre])[ExcelVarles.caseUrl],\n    \t\tdata=json.loads(excel.case_prev(datas[ExcelVarles.casePre])[ExcelVarles.params])\n    \t)\n    \tprevResult = r.json()['data']['jwtToken']\n    \n    \t# 调用替换headers\n    \theader = excel.prevHeaders(prevResult)\n    \n    \tstatus_code = int(datas[ExcelVarles.status_code])\n    \n    \tdef case_assert_result(rquest):\n    \t\t'''\n    \t\t封装断言，状态码和期望值\n    \t\t:param rquest: 请求\n    \t\t:return:\n    \t\t'''\n    \t\tassert r.status_code == status_code\n    \t\tassert datas[ExcelVarles.expect] in json.dumps(r.json(), ensure_ascii=False)\n    \n    \tdef geturl():\n    \t\tif datas[ExcelVarles.caseName] == '获取账号':\n    \t\t\treturn str(datas[ExcelVarles.caseUrl]).replace('{telephone}','18888888805')\n    \t\telif datas[ExcelVarles.caseName] == '账号离职':\n    \t\t\treturn str(datas[ExcelVarles.caseUrl]).replace('{ID}',readFile())\n    \n    \tif datas[ExcelVarles.caseMethod] == 'get':\n    \t\tr = obj.get(url=geturl(), headers=header)\n    \t\tcase_assert_result(rquest=r)\n    \t\tprint(r.json())\n    \t\tif datas[ExcelVarles.caseName] == '获取账号':\n    \t\t\twriteFile(r.json()['data']['records'][0]['id'])\n    \telif datas[ExcelVarles.caseMethod] == 'post' and datas[ExcelVarles.paramsType] == 'data':\n    \t\tr = obj.post(url=datas[ExcelVarles.caseUrl],data = params,headers = header)\n    \t\tcase_assert_result(rquest=r)\n    \t\tprint(r.json())\n    \telif datas[ExcelVarles.caseMethod] == 'post' and datas[ExcelVarles.paramsType] == 'json':\n    \t\tif datas[ExcelVarles.caseName] == '编辑账号':\n    \t\t\tparams = str(params).replace('{accountId}',readFile())\n    \t\t\tnew_params = ast.literal_eval(params)  # 将参数从拼接后的str类型转为字典类型\n    \t\t\tr = obj.post(url=datas[ExcelVarles.caseUrl],json = new_params,headers = header)\n    \t\t\tcase_assert_result(rquest=r)\n    \t\t\tprint(r.json())\n    \t\telse:\n    \t\t\tr = obj.post(url=datas[ExcelVarles.caseUrl],json = params,headers = header)\n>   \t\t\tcase_assert_result(rquest=r)\n\ntest_account_N.py:86: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nrquest = <Response [200]>\n\n    def case_assert_result(rquest):\n    \t'''\n    \t封装断言，状态码和期望值\n    \t:param rquest: 请求\n    \t:return:\n    \t'''\n    \tassert r.status_code == status_code\n>   \tassert datas[ExcelVarles.expect] in json.dumps(r.json(), ensure_ascii=False)\nE    assert 'success' in '{\"code\": 400, \"data\": \"\", \"message\": \"手机号码不能重复\"}'\nE     +  where '{\"code\": 400, \"data\": \"\", \"message\": \"手机号码不能重复\"}' = <function dumps at 0x0000025BC0CE09D8>({'code': 400, 'data': '', 'message': '手机号码不能重复'}, ensure_ascii=False)\nE     +    where <function dumps at 0x0000025BC0CE09D8> = json.dumps\nE     +    and   {'code': 400, 'data': '', 'message': '手机号码不能重复'} = <bound method Response.json of <Response [200]>>()\nE     +      where <bound method Response.json of <Response [200]>> = <Response [200]>.json\n\ntest_account_N.py:59: AssertionError"}, "parameters": [{"name": "datas", "value": "{'测试用例ID': 'account_001', '模块': '账号管理', '接口名称': '新增账号', '请求地址': 'http://192.168.18.167:201/backend/system/user/saveUser', '前置条件': 'login', '请求方法': 'post', '请求参数类型': 'json', '请求参数': '{\"deptId\":\"1439791207755497479\",\"name\":\"autotester-05\",\"post\":\"运营人员-自动化\",\"roleIdList\":[\"1443147634252226560\"],\"extId\":\"\",\"telephone\":\"18888888805\",\"email\":\"18888888804@123.com\"}', '期望结果': 'success', '是否执行': 'y', '请求头': '{\"Authorization\":\"{token}\"}', '状态码': 200.0}"}], "start": 1675328923860, "stop": 1675328924078, "uuid": "ef40a4a4-8e17-4a08-bf8d-e19219204692", "historyId": "e622d43409a9c4aef6780b092958ff65", "testCaseId": "026375796a3b2dc5320e2ba88dafbf39", "fullName": "test_account_N#test_account", "labels": [{"name": "suite", "value": "test_account_N"}, {"name": "host", "value": "DESKTOP-GLT4U4I"}, {"name": "thread", "value": "16204-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_account_N"}]}